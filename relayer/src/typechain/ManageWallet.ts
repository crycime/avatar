/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IModuleCalls {
  export type TransactionStruct = {
    callType: PromiseOrValue<BigNumberish>;
    revertOnError: PromiseOrValue<boolean>;
    gasLimit: PromiseOrValue<BigNumberish>;
    target: PromiseOrValue<string>;
    value: PromiseOrValue<BigNumberish>;
    data: PromiseOrValue<BytesLike>;
  };

  export type TransactionStructOutput = [
    number,
    boolean,
    BigNumber,
    string,
    BigNumber,
    string
  ] & {
    callType: number;
    revertOnError: boolean;
    gasLimit: BigNumber;
    target: string;
    value: BigNumber;
    data: string;
  };
}

export interface ManageWalletInterface extends utils.Interface {
  functions: {
    "ADMIN()": FunctionFragment;
    "DEFAULT_ADMIN_ROLE()": FunctionFragment;
    "GASWALLET()": FunctionFragment;
    "OPERATOR()": FunctionFragment;
    "addUserWalletImpls(address[],string[])": FunctionFragment;
    "approve(address[],address[],uint256[])": FunctionFragment;
    "deploy(string,string)": FunctionFragment;
    "deployWithInvoke(string,string,(uint8,bool,uint256,address,uint256,bytes)[],uint256,bytes)": FunctionFragment;
    "disableUserWalletImpl(string)": FunctionFragment;
    "enableUserWalletImpl(string)": FunctionFragment;
    "fakeDeployWithInvoke(string,string,(uint8,bool,uint256,address,uint256,bytes)[])": FunctionFragment;
    "getRoleAdmin(bytes32)": FunctionFragment;
    "getUserAddress(string,string)": FunctionFragment;
    "grantMultiRoles(bytes32[],address[])": FunctionFragment;
    "grantRole(bytes32,address)": FunctionFragment;
    "hasRole(bytes32,address)": FunctionFragment;
    "initialize(address,string[],address[])": FunctionFragment;
    "isUserDeployed(string,string)": FunctionFragment;
    "jwtProxy(string)": FunctionFragment;
    "promoteUserWalletImpl(string)": FunctionFragment;
    "renounceRole(bytes32,address)": FunctionFragment;
    "revokeMultiRole(bytes32[],address[])": FunctionFragment;
    "revokeRole(bytes32,address)": FunctionFragment;
    "setProvider(string,address)": FunctionFragment;
    "setWhiteSpender(address[],bool[])": FunctionFragment;
    "supportsInterface(bytes4)": FunctionFragment;
    "transfer(address[],address[],uint256[])": FunctionFragment;
    "userWalletImplAddr(string)": FunctionFragment;
    "userWalletImplEnabled(string)": FunctionFragment;
    "userWalletProdVersion()": FunctionFragment;
    "users(bytes32)": FunctionFragment;
    "whiteContracts(address)": FunctionFragment;
    "whiteSpenders(address)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "ADMIN"
      | "DEFAULT_ADMIN_ROLE"
      | "GASWALLET"
      | "OPERATOR"
      | "addUserWalletImpls"
      | "approve"
      | "deploy"
      | "deployWithInvoke"
      | "disableUserWalletImpl"
      | "enableUserWalletImpl"
      | "fakeDeployWithInvoke"
      | "getRoleAdmin"
      | "getUserAddress"
      | "grantMultiRoles"
      | "grantRole"
      | "hasRole"
      | "initialize"
      | "isUserDeployed"
      | "jwtProxy"
      | "promoteUserWalletImpl"
      | "renounceRole"
      | "revokeMultiRole"
      | "revokeRole"
      | "setProvider"
      | "setWhiteSpender"
      | "supportsInterface"
      | "transfer"
      | "userWalletImplAddr"
      | "userWalletImplEnabled"
      | "userWalletProdVersion"
      | "users"
      | "whiteContracts"
      | "whiteSpenders"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "ADMIN", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "GASWALLET", values?: undefined): string;
  encodeFunctionData(functionFragment: "OPERATOR", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addUserWalletImpls",
    values: [PromiseOrValue<string>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "approve",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "deploy",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deployWithInvoke",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      IModuleCalls.TransactionStruct[],
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "disableUserWalletImpl",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "enableUserWalletImpl",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "fakeDeployWithInvoke",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      IModuleCalls.TransactionStruct[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getRoleAdmin",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAddress",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "grantMultiRoles",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "grantRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "hasRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>[],
      PromiseOrValue<string>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isUserDeployed",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "jwtProxy",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "promoteUserWalletImpl",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "renounceRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeMultiRole",
    values: [PromiseOrValue<BytesLike>[], PromiseOrValue<string>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "revokeRole",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setProvider",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setWhiteSpender",
    values: [PromiseOrValue<string>[], PromiseOrValue<boolean>[]]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "transfer",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<string>[],
      PromiseOrValue<BigNumberish>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "userWalletImplAddr",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userWalletImplEnabled",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "userWalletProdVersion",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "users",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "whiteContracts",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "whiteSpenders",
    values: [PromiseOrValue<string>]
  ): string;

  decodeFunctionResult(functionFragment: "ADMIN", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "DEFAULT_ADMIN_ROLE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "GASWALLET", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "OPERATOR", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addUserWalletImpls",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "approve", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deploy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "deployWithInvoke",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "disableUserWalletImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "enableUserWalletImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fakeDeployWithInvoke",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRoleAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "grantMultiRoles",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "grantRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "hasRole", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isUserDeployed",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "jwtProxy", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "promoteUserWalletImpl",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "renounceRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "revokeMultiRole",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "revokeRole", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setWhiteSpender",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "transfer", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "userWalletImplAddr",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWalletImplEnabled",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "userWalletProdVersion",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "whiteContracts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "whiteSpenders",
    data: BytesLike
  ): Result;

  events: {
    "Deployed(string,string,address)": EventFragment;
    "EthReceived(address,uint256)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "RoleAdminChanged(bytes32,bytes32,bytes32)": EventFragment;
    "RoleGranted(bytes32,address,address)": EventFragment;
    "RoleRevoked(bytes32,address,address)": EventFragment;
    "Transfered(address,address,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Deployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "EthReceived"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleAdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleGranted"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RoleRevoked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Transfered"): EventFragment;
}

export interface DeployedEventObject {
  arg0: string;
  arg1: string;
  arg2: string;
}
export type DeployedEvent = TypedEvent<
  [string, string, string],
  DeployedEventObject
>;

export type DeployedEventFilter = TypedEventFilter<DeployedEvent>;

export interface EthReceivedEventObject {
  arg0: string;
  arg1: BigNumber;
}
export type EthReceivedEvent = TypedEvent<
  [string, BigNumber],
  EthReceivedEventObject
>;

export type EthReceivedEventFilter = TypedEventFilter<EthReceivedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface RoleAdminChangedEventObject {
  role: string;
  previousAdminRole: string;
  newAdminRole: string;
}
export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  RoleAdminChangedEventObject
>;

export type RoleAdminChangedEventFilter =
  TypedEventFilter<RoleAdminChangedEvent>;

export interface RoleGrantedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  RoleGrantedEventObject
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export interface RoleRevokedEventObject {
  role: string;
  account: string;
  sender: string;
}
export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  RoleRevokedEventObject
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface TransferedEventObject {
  arg0: string;
  arg1: string;
  arg2: BigNumber;
}
export type TransferedEvent = TypedEvent<
  [string, string, BigNumber],
  TransferedEventObject
>;

export type TransferedEventFilter = TypedEventFilter<TransferedEvent>;

export interface ManageWallet extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ManageWalletInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    ADMIN(overrides?: CallOverrides): Promise<[string]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    GASWALLET(overrides?: CallOverrides): Promise<[string]>;

    OPERATOR(overrides?: CallOverrides): Promise<[string]>;

    addUserWalletImpls(
      _addrs: PromiseOrValue<string>[],
      _versions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    approve(
      _token: PromiseOrValue<string>[],
      _spender: PromiseOrValue<string>[],
      _value: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deploy(
      _userId: PromiseOrValue<string>,
      _provider: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    deployWithInvoke(
      _userId: PromiseOrValue<string>,
      _provider: PromiseOrValue<string>,
      _txs: IModuleCalls.TransactionStruct[],
      _nonce: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    disableUserWalletImpl(
      _version: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    enableUserWalletImpl(
      _version: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    fakeDeployWithInvoke(
      _userId: PromiseOrValue<string>,
      _provider: PromiseOrValue<string>,
      _txs: IModuleCalls.TransactionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getUserAddress(
      _userId: PromiseOrValue<string>,
      _provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    grantMultiRoles(
      roles: PromiseOrValue<BytesLike>[],
      addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    initialize(
      _admin: PromiseOrValue<string>,
      _providers: PromiseOrValue<string>[],
      _contracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isUserDeployed(
      _userId: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    jwtProxy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    promoteUserWalletImpl(
      _version: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeMultiRole(
      roles: PromiseOrValue<BytesLike>[],
      addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setProvider(
      provider: PromiseOrValue<string>,
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setWhiteSpender(
      addr: PromiseOrValue<string>[],
      flag: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    transfer(
      _token: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>[],
      _value: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    userWalletImplAddr(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    userWalletImplEnabled(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    userWalletProdVersion(overrides?: CallOverrides): Promise<[string]>;

    users(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    whiteContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    whiteSpenders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;
  };

  ADMIN(overrides?: CallOverrides): Promise<string>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  GASWALLET(overrides?: CallOverrides): Promise<string>;

  OPERATOR(overrides?: CallOverrides): Promise<string>;

  addUserWalletImpls(
    _addrs: PromiseOrValue<string>[],
    _versions: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  approve(
    _token: PromiseOrValue<string>[],
    _spender: PromiseOrValue<string>[],
    _value: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deploy(
    _userId: PromiseOrValue<string>,
    _provider: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  deployWithInvoke(
    _userId: PromiseOrValue<string>,
    _provider: PromiseOrValue<string>,
    _txs: IModuleCalls.TransactionStruct[],
    _nonce: PromiseOrValue<BigNumberish>,
    _signature: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  disableUserWalletImpl(
    _version: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  enableUserWalletImpl(
    _version: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  fakeDeployWithInvoke(
    _userId: PromiseOrValue<string>,
    _provider: PromiseOrValue<string>,
    _txs: IModuleCalls.TransactionStruct[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getRoleAdmin(
    role: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getUserAddress(
    _userId: PromiseOrValue<string>,
    _provider: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  grantMultiRoles(
    roles: PromiseOrValue<BytesLike>[],
    addr: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  grantRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  hasRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  initialize(
    _admin: PromiseOrValue<string>,
    _providers: PromiseOrValue<string>[],
    _contracts: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isUserDeployed(
    _userId: PromiseOrValue<string>,
    provider: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  jwtProxy(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  promoteUserWalletImpl(
    _version: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  renounceRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeMultiRole(
    roles: PromiseOrValue<BytesLike>[],
    addr: PromiseOrValue<string>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  revokeRole(
    role: PromiseOrValue<BytesLike>,
    account: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setProvider(
    provider: PromiseOrValue<string>,
    addr: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setWhiteSpender(
    addr: PromiseOrValue<string>[],
    flag: PromiseOrValue<boolean>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  supportsInterface(
    interfaceId: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  transfer(
    _token: PromiseOrValue<string>[],
    _to: PromiseOrValue<string>[],
    _value: PromiseOrValue<BigNumberish>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  userWalletImplAddr(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  userWalletImplEnabled(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  userWalletProdVersion(overrides?: CallOverrides): Promise<string>;

  users(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  whiteContracts(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  whiteSpenders(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  callStatic: {
    ADMIN(overrides?: CallOverrides): Promise<string>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    GASWALLET(overrides?: CallOverrides): Promise<string>;

    OPERATOR(overrides?: CallOverrides): Promise<string>;

    addUserWalletImpls(
      _addrs: PromiseOrValue<string>[],
      _versions: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    approve(
      _token: PromiseOrValue<string>[],
      _spender: PromiseOrValue<string>[],
      _value: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    deploy(
      _userId: PromiseOrValue<string>,
      _provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    deployWithInvoke(
      _userId: PromiseOrValue<string>,
      _provider: PromiseOrValue<string>,
      _txs: IModuleCalls.TransactionStruct[],
      _nonce: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    disableUserWalletImpl(
      _version: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    enableUserWalletImpl(
      _version: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    fakeDeployWithInvoke(
      _userId: PromiseOrValue<string>,
      _provider: PromiseOrValue<string>,
      _txs: IModuleCalls.TransactionStruct[],
      overrides?: CallOverrides
    ): Promise<void>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getUserAddress(
      _userId: PromiseOrValue<string>,
      _provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    grantMultiRoles(
      roles: PromiseOrValue<BytesLike>[],
      addr: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    initialize(
      _admin: PromiseOrValue<string>,
      _providers: PromiseOrValue<string>[],
      _contracts: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    isUserDeployed(
      _userId: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    jwtProxy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    promoteUserWalletImpl(
      _version: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    revokeMultiRole(
      roles: PromiseOrValue<BytesLike>[],
      addr: PromiseOrValue<string>[],
      overrides?: CallOverrides
    ): Promise<void>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setProvider(
      provider: PromiseOrValue<string>,
      addr: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setWhiteSpender(
      addr: PromiseOrValue<string>[],
      flag: PromiseOrValue<boolean>[],
      overrides?: CallOverrides
    ): Promise<void>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    transfer(
      _token: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>[],
      _value: PromiseOrValue<BigNumberish>[],
      overrides?: CallOverrides
    ): Promise<boolean>;

    userWalletImplAddr(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    userWalletImplEnabled(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    userWalletProdVersion(overrides?: CallOverrides): Promise<string>;

    users(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    whiteContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    whiteSpenders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;
  };

  filters: {
    "Deployed(string,string,address)"(
      arg0?: null,
      arg1?: null,
      arg2?: null
    ): DeployedEventFilter;
    Deployed(arg0?: null, arg1?: null, arg2?: null): DeployedEventFilter;

    "EthReceived(address,uint256)"(
      arg0?: null,
      arg1?: null
    ): EthReceivedEventFilter;
    EthReceived(arg0?: null, arg1?: null): EthReceivedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "RoleAdminChanged(bytes32,bytes32,bytes32)"(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: PromiseOrValue<BytesLike> | null,
      previousAdminRole?: PromiseOrValue<BytesLike> | null,
      newAdminRole?: PromiseOrValue<BytesLike> | null
    ): RoleAdminChangedEventFilter;

    "RoleGranted(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleGrantedEventFilter;

    "RoleRevoked(bytes32,address,address)"(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: PromiseOrValue<BytesLike> | null,
      account?: PromiseOrValue<string> | null,
      sender?: PromiseOrValue<string> | null
    ): RoleRevokedEventFilter;

    "Transfered(address,address,uint256)"(
      arg0?: null,
      arg1?: null,
      arg2?: null
    ): TransferedEventFilter;
    Transfered(arg0?: null, arg1?: null, arg2?: null): TransferedEventFilter;
  };

  estimateGas: {
    ADMIN(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    GASWALLET(overrides?: CallOverrides): Promise<BigNumber>;

    OPERATOR(overrides?: CallOverrides): Promise<BigNumber>;

    addUserWalletImpls(
      _addrs: PromiseOrValue<string>[],
      _versions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    approve(
      _token: PromiseOrValue<string>[],
      _spender: PromiseOrValue<string>[],
      _value: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deploy(
      _userId: PromiseOrValue<string>,
      _provider: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    deployWithInvoke(
      _userId: PromiseOrValue<string>,
      _provider: PromiseOrValue<string>,
      _txs: IModuleCalls.TransactionStruct[],
      _nonce: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    disableUserWalletImpl(
      _version: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    enableUserWalletImpl(
      _version: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    fakeDeployWithInvoke(
      _userId: PromiseOrValue<string>,
      _provider: PromiseOrValue<string>,
      _txs: IModuleCalls.TransactionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserAddress(
      _userId: PromiseOrValue<string>,
      _provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    grantMultiRoles(
      roles: PromiseOrValue<BytesLike>[],
      addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _admin: PromiseOrValue<string>,
      _providers: PromiseOrValue<string>[],
      _contracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isUserDeployed(
      _userId: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    jwtProxy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    promoteUserWalletImpl(
      _version: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeMultiRole(
      roles: PromiseOrValue<BytesLike>[],
      addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setProvider(
      provider: PromiseOrValue<string>,
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setWhiteSpender(
      addr: PromiseOrValue<string>[],
      flag: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    transfer(
      _token: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>[],
      _value: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    userWalletImplAddr(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userWalletImplEnabled(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    userWalletProdVersion(overrides?: CallOverrides): Promise<BigNumber>;

    users(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whiteContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    whiteSpenders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    ADMIN(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    GASWALLET(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    OPERATOR(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addUserWalletImpls(
      _addrs: PromiseOrValue<string>[],
      _versions: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    approve(
      _token: PromiseOrValue<string>[],
      _spender: PromiseOrValue<string>[],
      _value: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deploy(
      _userId: PromiseOrValue<string>,
      _provider: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    deployWithInvoke(
      _userId: PromiseOrValue<string>,
      _provider: PromiseOrValue<string>,
      _txs: IModuleCalls.TransactionStruct[],
      _nonce: PromiseOrValue<BigNumberish>,
      _signature: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    disableUserWalletImpl(
      _version: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    enableUserWalletImpl(
      _version: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    fakeDeployWithInvoke(
      _userId: PromiseOrValue<string>,
      _provider: PromiseOrValue<string>,
      _txs: IModuleCalls.TransactionStruct[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getRoleAdmin(
      role: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserAddress(
      _userId: PromiseOrValue<string>,
      _provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    grantMultiRoles(
      roles: PromiseOrValue<BytesLike>[],
      addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    grantRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    hasRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _admin: PromiseOrValue<string>,
      _providers: PromiseOrValue<string>[],
      _contracts: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isUserDeployed(
      _userId: PromiseOrValue<string>,
      provider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    jwtProxy(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    promoteUserWalletImpl(
      _version: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    renounceRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeMultiRole(
      roles: PromiseOrValue<BytesLike>[],
      addr: PromiseOrValue<string>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: PromiseOrValue<BytesLike>,
      account: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setProvider(
      provider: PromiseOrValue<string>,
      addr: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setWhiteSpender(
      addr: PromiseOrValue<string>[],
      flag: PromiseOrValue<boolean>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    supportsInterface(
      interfaceId: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    transfer(
      _token: PromiseOrValue<string>[],
      _to: PromiseOrValue<string>[],
      _value: PromiseOrValue<BigNumberish>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    userWalletImplAddr(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userWalletImplEnabled(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    userWalletProdVersion(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    users(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whiteContracts(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    whiteSpenders(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
