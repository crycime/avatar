/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export declare namespace IJwtAuth {
  export type JWTNEWStruct = {
    kid: PromiseOrValue<string>;
    alg: PromiseOrValue<string>;
    headerBase64: PromiseOrValue<string>;
    payloadJson: PromiseOrValue<string>;
    signature: PromiseOrValue<BytesLike>;
    audStart: PromiseOrValue<BigNumberish>;
    emailStart: PromiseOrValue<BigNumberish>;
    nonceStart: PromiseOrValue<BigNumberish>;
    jtiStart: PromiseOrValue<BigNumberish>;
  };

  export type JWTNEWStructOutput = [
    string,
    string,
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber
  ] & {
    kid: string;
    alg: string;
    headerBase64: string;
    payloadJson: string;
    signature: string;
    audStart: BigNumber;
    emailStart: BigNumber;
    nonceStart: BigNumber;
    jtiStart: BigNumber;
  };

  export type JWTStruct = {
    kid: PromiseOrValue<string>;
    alg: PromiseOrValue<string>;
    headerBase64: PromiseOrValue<string>;
    payloadJson: PromiseOrValue<string>;
    signature: PromiseOrValue<BytesLike>;
  };

  export type JWTStructOutput = [string, string, string, string, string] & {
    kid: string;
    alg: string;
    headerBase64: string;
    payloadJson: string;
    signature: string;
  };
}

export interface JwksInterface extends utils.Interface {
  functions: {
    "addAudience(bytes)": FunctionFragment;
    "addEditor(address)": FunctionFragment;
    "addKey(string,bytes,bytes)": FunctionFragment;
    "addKeyBatch(string[],bytes[],bytes[])": FunctionFragment;
    "audiences(bytes)": FunctionFragment;
    "editors(address)": FunctionFragment;
    "exponents(string)": FunctionFragment;
    "getExponent(string)": FunctionFragment;
    "getModulus(string)": FunctionFragment;
    "getOwner()": FunctionFragment;
    "iToHex(bytes)": FunctionFragment;
    "initialize(address,bytes[])": FunctionFragment;
    "keys()": FunctionFragment;
    "removeAudience(bytes)": FunctionFragment;
    "removeEditor(address)": FunctionFragment;
    "setExponents(string,bytes)": FunctionFragment;
    "verifyAndParseJwt((string,string,string,string,bytes,uint256,uint256,uint256,uint256))": FunctionFragment;
    "verifyAndParseJwt((string,string,string,string,bytes))": FunctionFragment;
    "verifySignature(string,string,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "addAudience"
      | "addEditor"
      | "addKey"
      | "addKeyBatch"
      | "audiences"
      | "editors"
      | "exponents"
      | "getExponent"
      | "getModulus"
      | "getOwner"
      | "iToHex"
      | "initialize"
      | "keys"
      | "removeAudience"
      | "removeEditor"
      | "setExponents"
      | "verifyAndParseJwt((string,string,string,string,bytes,uint256,uint256,uint256,uint256))"
      | "verifyAndParseJwt((string,string,string,string,bytes))"
      | "verifySignature"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "addAudience",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "addEditor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "addKey",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "addKeyBatch",
    values: [
      PromiseOrValue<string>[],
      PromiseOrValue<BytesLike>[],
      PromiseOrValue<BytesLike>[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "audiences",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "editors",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "exponents",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getExponent",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getModulus",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "getOwner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "iToHex",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>[]]
  ): string;
  encodeFunctionData(functionFragment: "keys", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "removeAudience",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "removeEditor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setExponents",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAndParseJwt((string,string,string,string,bytes,uint256,uint256,uint256,uint256))",
    values: [IJwtAuth.JWTNEWStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "verifyAndParseJwt((string,string,string,string,bytes))",
    values: [IJwtAuth.JWTStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "verifySignature",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "addAudience",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "addEditor", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "addKey", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addKeyBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "audiences", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "editors", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "exponents", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getExponent",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getModulus", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getOwner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "iToHex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "keys", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeAudience",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeEditor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setExponents",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAndParseJwt((string,string,string,string,bytes,uint256,uint256,uint256,uint256))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifyAndParseJwt((string,string,string,string,bytes))",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "verifySignature",
    data: BytesLike
  ): Result;

  events: {
    "Initialized(uint8)": EventFragment;
    "KeyAdded(string,bytes,bytes)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "KeyAdded"): EventFragment;
}

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface KeyAddedEventObject {
  arg0: string;
  arg1: string;
  arg2: string;
}
export type KeyAddedEvent = TypedEvent<
  [string, string, string],
  KeyAddedEventObject
>;

export type KeyAddedEventFilter = TypedEventFilter<KeyAddedEvent>;

export interface Jwks extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: JwksInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addAudience(
      _audience: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addEditor(
      _editor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addKey(
      kid: PromiseOrValue<string>,
      modulus: PromiseOrValue<BytesLike>,
      exponent: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    addKeyBatch(
      kids: PromiseOrValue<string>[],
      modulus: PromiseOrValue<BytesLike>[],
      exponent: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    audiences(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    editors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    exponents(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getExponent(
      kid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getModulus(
      kid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getOwner(overrides?: CallOverrides): Promise<[string]>;

    iToHex(
      buffer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    initialize(
      _admin: PromiseOrValue<string>,
      _audiences: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    keys(overrides?: CallOverrides): Promise<[string]>;

    removeAudience(
      _audience: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    removeEditor(
      _editor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setExponents(
      kid: PromiseOrValue<string>,
      exponent: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    "verifyAndParseJwt((string,string,string,string,bytes,uint256,uint256,uint256,uint256))"(
      _jwt: IJwtAuth.JWTNEWStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, string, string, BigNumber]>;

    "verifyAndParseJwt((string,string,string,string,bytes))"(
      _jwt: IJwtAuth.JWTStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, string, string, BigNumber]>;

    verifySignature(
      kid: PromiseOrValue<string>,
      message: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { result: BigNumber }>;
  };

  addAudience(
    _audience: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addEditor(
    _editor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addKey(
    kid: PromiseOrValue<string>,
    modulus: PromiseOrValue<BytesLike>,
    exponent: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  addKeyBatch(
    kids: PromiseOrValue<string>[],
    modulus: PromiseOrValue<BytesLike>[],
    exponent: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  audiences(
    arg0: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  editors(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  exponents(
    arg0: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getExponent(
    kid: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getModulus(
    kid: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getOwner(overrides?: CallOverrides): Promise<string>;

  iToHex(
    buffer: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  initialize(
    _admin: PromiseOrValue<string>,
    _audiences: PromiseOrValue<BytesLike>[],
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  keys(overrides?: CallOverrides): Promise<string>;

  removeAudience(
    _audience: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  removeEditor(
    _editor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setExponents(
    kid: PromiseOrValue<string>,
    exponent: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  "verifyAndParseJwt((string,string,string,string,bytes,uint256,uint256,uint256,uint256))"(
    _jwt: IJwtAuth.JWTNEWStruct,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string, string, string, BigNumber]>;

  "verifyAndParseJwt((string,string,string,string,bytes))"(
    _jwt: IJwtAuth.JWTStruct,
    overrides?: CallOverrides
  ): Promise<[BigNumber, string, string, string, BigNumber]>;

  verifySignature(
    kid: PromiseOrValue<string>,
    message: PromiseOrValue<string>,
    signature: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  callStatic: {
    addAudience(
      _audience: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addEditor(
      _editor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    addKey(
      kid: PromiseOrValue<string>,
      modulus: PromiseOrValue<BytesLike>,
      exponent: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    addKeyBatch(
      kids: PromiseOrValue<string>[],
      modulus: PromiseOrValue<BytesLike>[],
      exponent: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    audiences(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    editors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    exponents(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getExponent(
      kid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getModulus(
      kid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getOwner(overrides?: CallOverrides): Promise<string>;

    iToHex(
      buffer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    initialize(
      _admin: PromiseOrValue<string>,
      _audiences: PromiseOrValue<BytesLike>[],
      overrides?: CallOverrides
    ): Promise<void>;

    keys(overrides?: CallOverrides): Promise<string>;

    removeAudience(
      _audience: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    removeEditor(
      _editor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setExponents(
      kid: PromiseOrValue<string>,
      exponent: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    "verifyAndParseJwt((string,string,string,string,bytes,uint256,uint256,uint256,uint256))"(
      _jwt: IJwtAuth.JWTNEWStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, string, string, BigNumber]>;

    "verifyAndParseJwt((string,string,string,string,bytes))"(
      _jwt: IJwtAuth.JWTStruct,
      overrides?: CallOverrides
    ): Promise<[BigNumber, string, string, string, BigNumber]>;

    verifySignature(
      kid: PromiseOrValue<string>,
      message: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {
    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "KeyAdded(string,bytes,bytes)"(
      arg0?: null,
      arg1?: null,
      arg2?: null
    ): KeyAddedEventFilter;
    KeyAdded(arg0?: null, arg1?: null, arg2?: null): KeyAddedEventFilter;
  };

  estimateGas: {
    addAudience(
      _audience: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addEditor(
      _editor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addKey(
      kid: PromiseOrValue<string>,
      modulus: PromiseOrValue<BytesLike>,
      exponent: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    addKeyBatch(
      kids: PromiseOrValue<string>[],
      modulus: PromiseOrValue<BytesLike>[],
      exponent: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    audiences(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    editors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    exponents(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getExponent(
      kid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getModulus(
      kid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getOwner(overrides?: CallOverrides): Promise<BigNumber>;

    iToHex(
      buffer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initialize(
      _admin: PromiseOrValue<string>,
      _audiences: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    keys(overrides?: CallOverrides): Promise<BigNumber>;

    removeAudience(
      _audience: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    removeEditor(
      _editor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setExponents(
      kid: PromiseOrValue<string>,
      exponent: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    "verifyAndParseJwt((string,string,string,string,bytes,uint256,uint256,uint256,uint256))"(
      _jwt: IJwtAuth.JWTNEWStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "verifyAndParseJwt((string,string,string,string,bytes))"(
      _jwt: IJwtAuth.JWTStruct,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    verifySignature(
      kid: PromiseOrValue<string>,
      message: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addAudience(
      _audience: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addEditor(
      _editor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addKey(
      kid: PromiseOrValue<string>,
      modulus: PromiseOrValue<BytesLike>,
      exponent: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    addKeyBatch(
      kids: PromiseOrValue<string>[],
      modulus: PromiseOrValue<BytesLike>[],
      exponent: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    audiences(
      arg0: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    editors(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    exponents(
      arg0: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getExponent(
      kid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getModulus(
      kid: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    iToHex(
      buffer: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initialize(
      _admin: PromiseOrValue<string>,
      _audiences: PromiseOrValue<BytesLike>[],
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    keys(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeAudience(
      _audience: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    removeEditor(
      _editor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setExponents(
      kid: PromiseOrValue<string>,
      exponent: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    "verifyAndParseJwt((string,string,string,string,bytes,uint256,uint256,uint256,uint256))"(
      _jwt: IJwtAuth.JWTNEWStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "verifyAndParseJwt((string,string,string,string,bytes))"(
      _jwt: IJwtAuth.JWTStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    verifySignature(
      kid: PromiseOrValue<string>,
      message: PromiseOrValue<string>,
      signature: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
